create ticketing direction
create auth directory inside it
npm init -y   to create package.json inside auth

install dependencies inside auth
npm i typescript ts-node-dev express @t
ypes/express

inside auth create tsconfig.json file
tsc --init

create src folder in auth directory
inside create index.js file with following code content:

import express from 'express';
import { json } from 'body-parser';

const app = express();
app.use(json());

app.listen(3000, () => {
  console.log('Listening on port 3000');
});



amend script in package.json
"scripts": {
    "start": "ts-node-dev src/index.ts"
  },

  check code runs by following in auth folder on command line:
  npm start


in top level of auth directory, create Dockerfile containing:

FROM node:alpine

WORKDIR /app
COPY package.json .
RUN npm install
COPY . .

CMD["npm", "start"]

also in top level of auth directory, create .dockerignore and add
node_modules

to prevent node_modules being copied into container

in auth at command line, build docker image for auth
docker build -t bc1890/auth .


in top level project directory create
infra/k8s directory

inside create auth-depl.yaml file, containing

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth
    template:
      metadata:
        labels:
          app: auth
      spec:
        containers:
          - name: auth
            image: bc1890/auth

---
apiVersion: v1
kind: Service
metadata:
  name: auth-srv
spec:
  selector:
    app: auth
  ports:
    - name: auth
      protocol: TCP
      port: 3000
      targetPort: 3000



In top level of project Ticketing
create skaffold.yaml file with following content:

apiVersion: apps/v1
kind: Deployment
metadata:
  name: auth-depl
spec:
  replicas: 1
  selector:
    matchLabels:
      app: auth
  template:
    metadata:
      labels:
        app: auth
    spec:
      containers:
        - name: auth
          image: bc1890/auth

---
apiVersion: v1
kind: Service
metadata:
  name: auth-srv
spec:
  selector:
    app: auth
  ports:
    - name: auth
      protocol: TCP
      port: 3000
      targetPort: 3000

Deploy using skaffold by entering in top level directory of project (where skaffold.yaml is situated) command line:
skaffold dev


in infra/k8s add ingress nginx file called ingress-srv.yaml

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ingress-service
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/use-regex: 'true'
spec:
  rules:
    - host: ticketing.dev
      http:
        paths:
          - path: /api/users/?(.*)
            backend:
              serviceName: auth-srv
              servicePort: 3000


in hosts file add line
127.0.0.1 ticketing.dev
so nginx routable from ticketing.dev


// scaffold routes for signup.ts, signin.ts, signout.ts, current-user.ts
look in npmjs.com for express-validator module and documentation

in auth directory
npm install express-validator

add validation to signup file (inserted as middleware in square brackets as Traversy also showed)
also import Request and Response types from express and insert as types for res, req


import express, { Request, Response } from 'express';
import { body } from 'express-validator';
const router = express.Router();

router.post(
  '/api/users/signup',
  [
    body('email').isEmail().withMessage('Email must be valid'),
    body('password')
      .trim()
      .isLength({ min: 4, max: 20 })
      .withMessage('Password must be between 4 and 20 characters.'),
  ],
  (req: Request, res: Response) => {
    res.send('Test message from signin.ts');
    const { email, password } = req.body;
  }
);

export { router as signupRouter };
